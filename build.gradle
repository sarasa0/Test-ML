buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.2.0'
    }
}

apply plugin: 'java'
compileJava.options.encoding = 'ISO-8859-1' //latin 1
apply plugin: 'org.junit.platform.gradle.plugin'

group 'Automation-ML'
version '1.0'

sourceCompatibility = 1.8

ext.jUnit = "4.12"
//ext.selenium = "3.8.1"
ext.selenium = "3.141.59"

repositories {
    mavenCentral()
    jcenter()
}

test {
    useJUnitPlatform()
}



dependencies {
    compile group: 'junit', name: 'junit', version: jUnit
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: selenium
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
    compile "commons-codec:commons-codec:1.10:sources"
    compile "commons-codec:commons-codec:1.10:javadoc"
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.9'
    compile group: 'org.awaitility', name: 'awaitility', version: '3.1.6'
    compile group: 'org.awaitility', name: 'awaitility-test-support', version: '3.1.6'
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File',
                'Implementation-Version': version,
                'Main-Class': 'Main'
    }
    baseName = project.name
    from { sourceSets.test.output.classesDirs }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task AllTest(type: Test) {
    systemProperties = System.properties
    include '**/*.class'
    filter {
        includeTestsMatching "*.*"
    }
    outputs.upToDateWhen { false }
}
task AllSuites(type: Test) {
    systemProperties = System.properties
    include '**/TestSuite*.class'
}

task testSuite1(type: Test) {
    systemProperties = System.properties
    include '**/TestSuite1.class'
}

task testSuite2(type: Test) {
    systemProperties = System.properties
    include '**/TestSuite2.class'
}

task test1(type: Test) {
    systemProperties = System.properties
    include '**/*.class'
    filter {
        includeTestsMatching "*.test*"
    }
    outputs.upToDateWhen { false }
}